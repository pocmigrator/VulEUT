import org.junit.Test;
import static org.junit.Assert.assertTrue;
import java.io.File;
import java.io.IOException;

public class ZipUtilTest {

    @Test
    public void testVulnerabilityTriggered() {
        // Test input data (file path)
        String input = "../crash-a49f954b47e05cc5265db441a64e5d2d55cb33b8";

        // Create a Java File from the input path
        File fileInput = new File(input);

        // Intercept the vulnerable method call
        MethodCallInterceptor.interceptor(
            net.lingala.zip4j.io.inputstream.ZipInputStream.class,
            "ZipInputStream",
            new Object[]{fileInput}
        );

        try {
            // Create an instance of ZipUtil and call the function under test
            ZipUtil zipUtil = new ZipUtil();
            zipUtil.extractWithZipInputStream(fileInput, null);
        } catch (IOException e) {
            // Exception caught, do nothing
        }

        // Assert that the vulnerability was successfully triggered
        assertTrue(MethodCallInterceptor.isTriggered());
        assertTrue(MethodCallInterceptor.isConditionMet());
    }
}
