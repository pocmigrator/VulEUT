import static org.junit.Assert.assertTrue;
import org.junit.Test;
import com.thoughtworks.xstream.XStream;

public class XMLConfigTest {

    @Test
    public void testVulnerabilityTriggered() {
        // Test input data (XML content)
        String input = "<div class=\"Source XML\"><pre> <set> <set> <set> <set> <set> <set> <string>a</string> </set> <set> <string>b</string> </set> </set> <set> <string>c</string> <set reference='../../../set/set[2]'/> </set> </set> </set> </set> </set>; </pre></div> <div class=\"Source Java\"><pre>XStream xstream = new XStream(); xstream.fromXML(xml); </pre></div>";

        // Intercept the method call to trigger the vulnerability
        MethodCallInterceptor.interceptor(
            XStream.class, "fromXML", new Object[] { input }
        );

        // Execute the vulnerable code (function under test)
        try {
            XMLConfig.toBean(input, Object.class);
        } catch (Exception e) {
            // Exception caught, do nothing after catching it
        }

        // Assert that the vulnerability was successfully triggered
assertTrue(MethodCallInterceptor.isTriggered());
assertTrue(MethodCallInterceptor.isConditionMet());
    }
}
