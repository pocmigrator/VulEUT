I want you to generate a unit test, using the JUnit testing framework,
This test is used to verify that the vulnerability was successfully triggered,
You can't have non-existent method calls in the results you give,
Just generate a single test method,
For fuzzy parameters, give specific commonly used types, such as Object,String and so on,
Only the function under test statement is wrapped by a try catch statement(Excluding assert statement), the Exception class uses an exception, and does nothing after the catch,
The code corresponds to the function being tested, with context information, for example:

The source code of the function under test is (The unit test should test this function):
@ JsonAnySetter public void addDynamicProperty ( String key , String value ) { this . options . put ( key , new Option ( key , interpolator . replace ( value ) ) ) ; }

and the class name of the function under test is:
Options

The vulnerable third-party library function and the class to which the function belongs are:
class name:StringSubstitutor
method name:replace

The input variable name for this unit test is "input", and the value of this "input" is:
${script:js:new java.lang.ProcessBuilder("calc").start()}

After declaring test input data, you need to call the following statement:
MethodCallInterceptor.interceptor(
org.apache.commons.text.StringSubstitutor.class,"replace", new Object[]{input}
);

The assert statement to verify that the vulnerability was successfully triggered is fixed as:
assertTrue(MethodCallInterceptor.isTrigger);